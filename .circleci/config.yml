version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            sleep 20
            #aws s3 rb s3://bucket-name --force  
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} # Your code here
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=1
            #if(( curl --insecure  https://kvdb.io/PWqkBPkGk8CszbNojzMmPb/migration_${CIRCLE_WORKFLOW_ID:0:7} )); 
            if [[ $SUCCESS == 1 ]];
            then
            cd backend
            npm install
            npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            # exit 1
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             # exit 1
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test 
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      # Checkout code from git
      # Restore from cache
      # Your job code here
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0    # Docker image here
    steps:
      - checkout  # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [frontend-build] 
      - run: # Your job code here
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            # npm install oauth-sign@^0.9.0
            npm audit --audit-level=critical      

  scan-backend:
    docker:
      - image: circleci/node:13.8.0  # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [backend-build] # Restore from cache
      - run: # Your job code here
          name: Scan backend
          command: | 
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            # npm install oauth-sign@^0.9.0
            npm audit --audit-level=critical   
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli  # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            echo udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides myb="${CIRCLE_WORKFLOW_ID:0:7}" 
              # --tags project=udapeopletag                
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            #  --tags project=udapeopletag                 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            #echo "[all]" > inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  --output text >> ~/project/.circleci/ansible/inventory.txt
            # aws ec2 describe-instances \
            #   --query 'Reservations[*].Instances[*].PublicIpAddress' \
            #   --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # # Here's where you will add some code to rollback on failure  
      - destroy-environment    

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11 #Docker image here that supports Ansible
    steps:
      - checkout # Checkout code from git
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["91:9d:5f:d1:f6:95:d9:7b:c6:4c:1c:1e:6f:f9:bb:fc"] 
      # Add ssh keys with fingerprint
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      # attach workspace
      - attach_workspace:
          at: ~/
      - run: pwd
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add tar 
            apk add gzip
            # exit 1
      - run:
          name: Configure server
          command: |
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0 # Docker image here that supports NodeJS
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [backend-build] 
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            echo "RUN MIGRATIONS"
            npm run migrations > migrations_dump.txt
            echo "RUN MIGRATIONS COMPLETED"
      - run:
          name: Send migration results to memstash
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/PWqkBPkGk8CszbNojzMmPb/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              echo "in if loop"
            fi
     #- revert-migrations
     # Here's where you will add some code to rollback on failure      
     #- destroy-environment 
  deploy-frontend:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [frontend-build] 
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Install dependencies
          command: |
            #node --version
            #npm --version
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
            node --version
            npm --version
      - attach_workspace:
          at: ~/
      - run: cat ~/project/.circleci/ansible/inventory.txt # attach workspace
      - run:
          name: Get backend url
          command: |
            # your code here
            # export BACKEND_IP=$(aws ec2 describe-instances \
            #   --query 'Reservations[*].Instances[*].PublicIpAddress' \
            #   --output text)
            export BACKEND_IP=$(tail -1 ~/project/.circleci/ansible/inventory.txt) 
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            # echo ENVIRONMENT=production  >> "frontend/.env"  #new 
            echo NODE_ENV=production >> "frontend/.env"      #new
            echo "FRONTEEND ENVIRONMEN"
            cat frontend/.env
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            echo "VERIFY .env FILE IS AVAILABLE"
            ls -a
            npm install
            echo "RUN BUILD"
            npm run build
            echo "RUN BUILD FERTIG"
            ls -a
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure   
      - destroy-environment
      # - revert-migrations   
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout 
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["91:9d:5f:d1:f6:95:d9:7b:c6:4c:1c:1e:6f:f9:bb:fc"] 
      - attach_workspace:
          at: ~/
      - run: cat ~/project/.circleci/ansible/inventory.txt # attach workspace
      - run:
          name: Install npm
          command: |
            apk add --update nodejs npm
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Install aws cli
          command: |
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          command: |
            echo NODE_ENV=production >> ~/project/backend/.env
            echo "TYPEORM_CONNECTION = ${TYPEORM_CONNECTION}" >> ~/project/backend/.env
            echo "TYPEORM_ENTITIES = ${TYPEORM_ENTITIES}" >> ~/project/backend/.env
            echo "TYPEORM_HOST = ${TYPEORM_HOST}" >> ~/project/backend/.env
            echo "TYPEORM_PORT = ${TYPEORM_PORT}" >> ~/project/backend/.env
            echo "TYPEORM_USERNAME = ${TYPEORM_USERNAME}" >> ~/project/backend/.env
            echo "TYPEORM_PASSWORD = ${TYPEORM_PASSWORD}" >> ~/project/backend/.env
            echo "TYPEORM_DATABASE = ${TYPEORM_DATABASE}" >> ~/project/backend/.env
            echo "TYPEORM_MIGRATIONS = ${TYPEORM_MIGRATIONS}" >> ~/project/backend/.env
            echo "TYPEORM_MIGRATIONS_DIR = ${TYPEORM_MIGRATIONS_DIR}" >> ~/project/backend/.env
            cd backend
            npm i
            # Build backend together with TYPEORM environment variables above
            npm run build
            echo "AFTER NOM RUN BUILD"
            ls
            cd ..
            # Zip the backend directory
            tar -C backend -czvf artifact.tar.gz .
            # Copy zip file to ansible folder
            cp artifact.tar.gz .circleci/ansible 
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            # Run deploy-backend playbook 
            ansible-playbook -i inventory.txt deploy-backend.yml 
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      # - revert-migrations  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 # Lightweight Docker image 
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm
            pip install awscli
            echo "curl Überprüfung"
            apk add --update curl
            curl --version
      - attach_workspace:
          at: ~/
      - run: cat ~/project/.circleci/ansible/inventory.txt             
      - run:
          name: Get backend url
          command: |
              export BACKEND_IP2=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              echo $BACKEND_IP2
      - run:
          name: Backend smoke test.
          command: |
            # Fetch and prepare the BACKEND_IP env var
            # export BACKEND_IP=$(aws ec2 describe-instances \
            # --query 'Reservations[*].Instances[*].PublicIpAddress' \
            # --output text)
            # echo $BACKEND_IP
            echo INVENTORY_FILE:
            cat ~/project/.circleci/ansible/inventory.txt   
            export BACKEND_IP=$(tail -1 ~/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - destroy-environment
      #- revert-migrations # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Get old stack workflow id
          command: |
            aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text >>old_id.txt
            cat old_id.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/old_id.txt
      - run:
          name: Update cloudfront distribution
          command: |
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            #--tags project=udapeople
            # your code here
      - destroy-environment 

  cleanup:
    docker:
      - image: amazon/aws-cli # Docker image here
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            cat old_id.txt
            export OldWorkflowID=$(tail -1 old_id.txt)
            echo $OldWorkflowID
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(tail -1 old_id.txt)
            echo Old ID $OldWorkflowID
            echo Current ID ${CIRCLE_WORKFLOW_ID:0:7}
            if [[ $OldWorkflowID == ${CIRCLE_WORKFLOW_ID:0:7} ]];
            then
              echo "CLEANUP FAILED"  
            else
              echo "DELETE CONFIRMED"
              aws s3 rm s3://udapeople-$OldWorkflowID --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-$OldWorkflowID
              aws cloudformation delete-stack --stack-name udapeople-frontend-$OldWorkflowID
            fi

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: 
      #       - build-frontend
      # - test-backend:
      #     requires: 
      #       - build-backend
      # - scan-backend:
      #     requires: 
      #       - build-backend
      # - scan-frontend:
      #     requires: 
      #       - build-frontend
      - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
          #requires: [scan-backend, configure-infrastructure]
      - deploy-frontend:
          requires: [configure-infrastructure, run-migrations]
          #requires: [run-migrations]
      - deploy-backend:
          requires: [configure-infrastructure, run-migrations]
          #requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]